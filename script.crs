some = v. (Some, v);
none = None;

some = v. (Some, v);
none = None;

map = f.o. o <> (Some, v) ? some (f v) : none;

condition = c.v. (c v) ? some v : none;

rec = n. n == 0 ? 0 : n + (rec n - 1);

compose = f.s.a. f(s a);

mapRec = map rec;

mapPrint = map print;

c = mapPrint $ map (n. n == 0 ? Mda : n) $ mapRec $ condition (n. n >= 0);

more = x.y. x > y;
snd = (_, s). s;

t = ;

t (0, 1) |> print;


